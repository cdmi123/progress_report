<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
  <div>
    <h2 class="fw-bold text-dark mb-1">
      <i class="bi bi-journal-plus me-2 text-primary"></i>Add New Course
    </h2>
    <p class="text-muted mb-0">Create a new course with topics and intelligent scanning features</p>
  </div>
  <div class="d-flex gap-2">
    <a href="/admin/dashboard" class="btn btn-outline-primary">
      <i class="bi bi-speedometer2 me-2"></i>Dashboard
    </a>
    <a href="/admin/courses" class="btn btn-outline-secondary">
      <i class="bi bi-journal-album me-2"></i>View Courses
    </a>
  </div>
</div>

<!-- Form Card -->
<div class="card border-0 shadow-sm">
  <div class="card-header bg-white border-0 py-3">
    <div class="d-flex align-items-center">
      <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
        <i class="bi bi-journal-text text-primary"></i>
      </div>
      <div>
        <h5 class="mb-1">Course Information</h5>
        <p class="mb-0 text-muted">Fill in the details below to create your course</p>
      </div>
    </div>
  </div>
  
  <div class="card-body p-4">
    <form method="POST" action="/admin/course/add" id="courseForm">
      <!-- Course Name Section -->
      <div class="mb-4">
        <div class="form-floating">
          <input type="text" name="name" class="form-control" 
                 id="courseName" placeholder="Course Name" required>
          <label for="courseName">
            <i class="bi bi-book-half me-2"></i>Course Name
          </label>
        </div>
        <div class="form-text">
          <i class="bi bi-info-circle me-1"></i>Enter a descriptive name for your course
        </div>
      </div>

      <!-- Topics Section -->
      <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <div>
            <h6 class="mb-1 fw-semibold">
              <i class="bi bi-list-ul me-2 text-primary"></i>Course Topics
            </h6>
            <p class="text-muted mb-0 small">Add individual topics or use smart scanning</p>
          </div>
          <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary btn-sm" onclick="addTopic()">
              <i class="bi bi-plus-circle me-1"></i>Add Topic
            </button>
            <button type="button" class="btn btn-success btn-sm" onclick="openScanModal()">
              <i class="bi bi-camera me-1"></i>Smart Scan
            </button>
          </div>
        </div>
        
        <div id="topicsContainer">
          <div class="topic-item mb-2">
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="bi bi-hash"></i>
              </span>
              <input type="text" name="topics" class="form-control topic-input" 
                     placeholder="Enter topic name" required>
              <button type="button" class="btn btn-outline-danger" onclick="removeTopic(this)" 
                      title="Remove topic">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </div>
        </div>
        
        <div class="mt-3">
          <div class="alert alert-info border-0 bg-light">
            <div class="d-flex align-items-center">
              <i class="bi bi-lightbulb text-primary me-2"></i>
              <div class="small">
                <strong>Pro Tip:</strong> Use Smart Scan to automatically extract topics from PDFs, images, or camera captures
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="d-flex justify-content-between align-items-center pt-3 border-top">
        <button type="reset" class="btn btn-outline-secondary">
          <i class="bi bi-arrow-clockwise me-2"></i>Reset Form
        </button>
        
        <button type="submit" class="btn btn-primary">
          <i class="bi bi-check-circle me-2"></i>Create Course
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Custom CSS for Add Course page -->
<style>
/* Animation for new topics */
@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.topic-item {
  animation: slideIn 0.3s ease-out;
  transition: all 0.3s ease;
}

.topic-item:hover {
  transform: translateX(5px);
}

/* Enhanced form focus states */
.form-control:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
}

/* Button hover effects */
.btn {
  transition: all 0.3s ease;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

/* Card hover effects */
.card {
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
}

/* Loading animation */
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

.loading {
  animation: pulse 1.5s infinite;
}

/* Responsive improvements */
@media (max-width: 768px) {
  .card-body {
    padding: 1.5rem !important;
  }
  
  .modal-body {
    padding: 1.5rem !important;
  }
}
</style>

<!-- Toast Notification Container -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
  <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="bi bi-info-circle-fill text-primary me-2"></i>
      <strong class="me-auto">Notification</strong>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Course added successfully!
    </div>
  </div>
</div>

<!-- Hidden file inputs for scanning -->
<input type="file" id="scanImageInput" accept="image/*" style="display:none">
<input type="file" id="scanPdfInput" accept="application/pdf" style="display:none">

<!-- Scan Options Modal -->
<div class="modal fade" id="scanModal" tabindex="-1" aria-labelledby="scanModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <div class="d-flex align-items-center">
          <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
            <i class="bi bi-camera text-primary"></i>
          </div>
          <div>
            <h5 class="modal-title mb-1">Smart Scanning Options</h5>
            <p class="mb-0 text-muted small">Choose your preferred scanning method</p>
          </div>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      
      <div class="modal-body p-4">
        <div class="row g-3">
          <!-- Camera Capture -->
          <div class="col-md-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center p-4">
                <div class="mb-3">
                  <div class="bg-primary bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                    <i class="bi bi-camera-video text-primary" style="font-size: 2rem;"></i>
                  </div>
                </div>
                <h6 class="card-title">Camera Capture</h6>
                <p class="card-text small text-muted mb-3">Take a photo with your camera</p>
                <button type="button" class="btn btn-primary btn-sm w-100" onclick="captureFromCamera()">
                  <i class="bi bi-camera me-1"></i>Open Camera
                </button>
              </div>
            </div>
          </div>
          
          <!-- Image Upload -->
          <div class="col-md-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center p-4">
                <div class="mb-3">
                  <div class="bg-success bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                    <i class="bi bi-image text-success" style="font-size: 2rem;"></i>
                  </div>
                </div>
                <h6 class="card-title">Upload Image</h6>
                <p class="card-text small text-muted mb-3">Select an image file from your device</p>
                <button type="button" class="btn btn-success btn-sm w-100" onclick="uploadImage()">
                  <i class="bi bi-upload me-1"></i>Choose Image
                </button>
              </div>
            </div>
          </div>
          
          <!-- PDF Upload -->
          <div class="col-md-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center p-4">
                <div class="mb-3">
                  <div class="bg-danger bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                    <i class="bi bi-file-earmark-pdf text-danger" style="font-size: 2rem;"></i>
                  </div>
                </div>
                <h6 class="card-title">Upload PDF</h6>
                <p class="card-text small text-muted mb-3">Select a PDF file to extract topics</p>
                <button type="button" class="btn btn-danger btn-sm w-100" onclick="uploadPdf()">
                  <i class="bi bi-file-earmark-pdf me-1"></i>Choose PDF
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Camera Preview Section -->
        <div id="cameraSection" class="mt-4 d-none">
          <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
              <h6 class="mb-0">
                <i class="bi bi-camera me-2"></i>Camera Preview
              </h6>
            </div>
            <div class="card-body text-center">
              <video id="cameraVideo" autoplay playsinline class="img-fluid rounded" style="max-width: 100%; max-height: 300px;"></video>
              <canvas id="cameraCanvas" style="display: none;"></canvas>
              <div class="mt-3">
                <button type="button" class="btn btn-primary me-2" onclick="capturePhoto()">
                  <i class="bi bi-camera me-1"></i>Capture Photo
                </button>
                <button type="button" class="btn btn-warning me-2" onclick="openFullscreenCamera()">
                  <i class="bi bi-arrows-fullscreen me-1"></i>Full Screen
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeCamera()">
                  <i class="bi bi-x-circle me-1"></i>Close Camera
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Fullscreen Camera Overlay -->
<div id="fullscreenCamera" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="z-index: 9999; background: #000;">
  <div class="position-relative w-100 h-100">
    <!-- Camera Video -->
    <video id="fullscreenVideo" autoplay playsinline class="w-100 h-100 object-fit-cover"></video>
    
    <!-- Overlay Controls -->
    <div class="position-absolute top-0 start-0 w-100 p-3" style="background: linear-gradient(to bottom, rgba(0,0,0,0.7), transparent);">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="text-white mb-0">
          <i class="bi bi-camera me-2"></i>Document Scanner
        </h5>
        <button type="button" class="btn btn-outline-light btn-sm" onclick="closeFullscreenCamera()">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
    </div>
    
         <!-- Bottom Controls -->
     <div class="position-absolute bottom-0 start-0 w-100 p-4" style="background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);">
       <div class="d-flex justify-content-center align-items-center gap-3">
         <button type="button" class="btn btn-light btn-lg rounded-circle" onclick="closeFullscreenCamera()" style="width: 60px; height: 60px;">
           <i class="bi bi-x-lg"></i>
         </button>
         <button type="button" class="btn btn-primary btn-lg rounded-circle" onclick="captureFullscreenPhoto()" style="width: 80px; height: 80px;">
           <i class="bi bi-camera" style="font-size: 1.5rem;"></i>
         </button>
         <button type="button" class="btn btn-light btn-lg rounded-circle" onclick="switchCamera()" style="width: 60px; height: 60px;">
           <i class="bi bi-arrow-repeat"></i>
         </button>
       </div>
       
       <!-- Auto-capture indicator -->
       <div class="d-flex justify-content-center mt-3">
         <div id="autoCaptureIndicator" class="d-flex align-items-center gap-2 px-3 py-2 rounded-pill" style="background: rgba(255,255,255,0.2); backdrop-filter: blur(10px);">
           <div id="autoCaptureStatus" class="d-flex align-items-center gap-2">
             <div class="spinner-border spinner-border-sm text-success d-none" id="autoCaptureSpinner" role="status"></div>
             <span class="text-white small">Auto-capture: <span id="autoCaptureText">Active</span></span>
           </div>
           <button type="button" class="btn btn-sm btn-outline-light" onclick="toggleAutoCapture()" id="autoCaptureToggle">
             <i class="bi bi-pause-fill"></i>
           </button>
         </div>
       </div>
     </div>
    
    <!-- Canvas for capture -->
    <canvas id="fullscreenCanvas" style="display: none;"></canvas>
  </div>
</div>

<!-- Lightweight loader -->
<div id="scanLoader" class="position-fixed top-0 start-50 translate-middle-x mt-3 d-none" style="z-index: 1060">
  <div class="alert alert-info d-flex align-items-center py-2 px-3 shadow-sm mb-0">
    <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
    <div id="scanLoaderText">Scanning for topics…</div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
 <!-- Tesseract.js for OCR -->
 <script src="https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js"></script>
 <!-- PDF.js for PDF parsing -->
 <script src="https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.min.js"></script>
 <script>
   // Initialize PDF.js
   if (typeof pdfjsLib !== 'undefined') {
     pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js';
   } else {
     console.error('PDF.js failed to load from CDN');
   }
   
 </script>

<script>
  // Function to add a new topic input
  function addTopic() {
    const topicsContainer = document.getElementById('topicsContainer');
    const topicCount = topicsContainer.children.length;
    
    const topicDiv = document.createElement('div');
    topicDiv.className = 'topic-item mb-2';
    topicDiv.innerHTML = `
      <div class="input-group">
        <span class="input-group-text bg-light">
          <i class="bi bi-hash"></i>
        </span>
        <input type="text" name="topics" class="form-control topic-input" placeholder="Enter topic name" required>
        <button type="button" class="btn btn-outline-danger" onclick="removeTopic(this)" title="Remove topic">
          <i class="bi bi-trash"></i>
        </button>
      </div>
    `;
    
    topicsContainer.appendChild(topicDiv);
    
    // Focus on the new input
    const newInput = topicDiv.querySelector('.topic-input');
    newInput.focus();
    
    // Show notification
    showNotification('New topic field added', 'info');
  }
  
  // Function to remove a topic input
  function removeTopic(button) {
    const topicItem = button.closest('.topic-item');
    const topicsContainer = document.getElementById('topicsContainer');
    
    // Don't remove if it's the last one
    if (topicsContainer.children.length <= 1) {
      showNotification('At least one topic is required', 'warning');
      return;
    }
    
    topicItem.remove();
    showNotification('Topic removed', 'info');
  }
  
  // Function to show notifications
  function showNotification(message, type = 'info') {
    const toastEl = document.getElementById('notificationToast');
    const toast = new bootstrap.Toast(toastEl);
    
    // Update toast content based on type
    const toastHeader = toastEl.querySelector('.toast-header');
    const toastBody = toastEl.querySelector('.toast-body');
    
    // Reset classes
    toastHeader.className = 'toast-header';
    
    // Set icon and color based on type
    let icon = 'bi-info-circle-fill';
    let iconColor = 'text-primary';
    
    if (type === 'success') {
      icon = 'bi-check-circle-fill';
      iconColor = 'text-success';
    } else if (type === 'warning') {
      icon = 'bi-exclamation-triangle-fill';
      iconColor = 'text-warning';
    } else if (type === 'danger') {
      icon = 'bi-x-circle-fill';
      iconColor = 'text-danger';
    }
    
    toastHeader.innerHTML = `
      <i class="bi ${icon} ${iconColor} me-2"></i>
      <strong class="me-auto">Notification</strong>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    `;
    
    toastBody.textContent = message;
    
    // Show the toast
    toast.show();
  }
  
  // Form submission validation
  document.getElementById('courseForm').addEventListener('submit', function(e) {
    const topicInputs = document.querySelectorAll('.topic-input');
    let hasEmptyTopic = false;
    
    topicInputs.forEach(input => {
      if (input.value.trim() === '') {
        hasEmptyTopic = true;
        input.classList.add('is-invalid');
      } else {
        input.classList.remove('is-invalid');
      }
    });
    
    if (hasEmptyTopic) {
      e.preventDefault();
      showNotification('Please fill in all topic fields', 'warning');
    }
  });

  // Modal and scanning functions
  function openScanModal() {
    const modal = new bootstrap.Modal(document.getElementById('scanModal'));
    modal.show();
  }

  // Camera functions
  let stream = null;
  let isFullscreen = false;
  
  async function captureFromCamera() {
    try {
      stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        } 
      });
      
      const video = document.getElementById('cameraVideo');
      video.srcObject = stream;
      document.getElementById('cameraSection').classList.remove('d-none');
      
    } catch (err) {
      console.error('Camera error:', err);
      showNotification('Camera access denied. Please allow camera permissions.', 'warning');
    }
  }
  
  function capturePhoto() {
    const video = document.getElementById('cameraVideo');
    const canvas = document.getElementById('cameraCanvas');
    const context = canvas.getContext('2d');
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    context.drawImage(video, 0, 0);
    
    canvas.toBlob(async (blob) => {
      const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });
      closeCamera();
      const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
      modal.hide();
      await handleImageFile(file);
    }, 'image/jpeg', 0.8);
  }
  
  function closeCamera() {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      stream = null;
    }
    document.getElementById('cameraSection').classList.add('d-none');
  }
  
  // Fullscreen camera functions
  let autoCaptureInterval = null;
  let lastCaptureTime = 0;
  
  function openFullscreenCamera() {
    if (!stream) return;
    
    const fullscreenVideo = document.getElementById('fullscreenVideo');
    const fullscreenCamera = document.getElementById('fullscreenCamera');
    
    fullscreenVideo.srcObject = stream;
    fullscreenCamera.classList.remove('d-none');
    isFullscreen = true;
    
    // Hide modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
    modal.hide();
    
    // Prevent body scroll
    document.body.style.overflow = 'hidden';
    
    // Start auto-capture monitoring
    startAutoCapture();
  }
  
  function closeFullscreenCamera() {
    const fullscreenCamera = document.getElementById('fullscreenCamera');
    fullscreenCamera.classList.add('d-none');
    isFullscreen = false;
    
    // Stop auto-capture
    stopAutoCapture();
    
    // Restore body scroll
    document.body.style.overflow = '';
    
    // Show modal again
    const modal = new bootstrap.Modal(document.getElementById('scanModal'));
    modal.show();
  }
  
  function captureFullscreenPhoto() {
    const video = document.getElementById('fullscreenVideo');
    const canvas = document.getElementById('fullscreenCanvas');
    const context = canvas.getContext('2d');
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    context.drawImage(video, 0, 0);
    
    canvas.toBlob(async (blob) => {
      const file = new File([blob], 'fullscreen-capture.jpg', { type: 'image/jpeg' });
      closeFullscreenCamera();
      closeCamera();
      await handleImageFile(file);
    }, 'image/jpeg', 0.9);
  }
  
  // Auto-capture functions
  let autoCaptureEnabled = true;
  
  function startAutoCapture() {
    if (autoCaptureInterval) return;
    
    autoCaptureInterval = setInterval(async () => {
      if (!isFullscreen || !stream || !autoCaptureEnabled) return;
      
      const video = document.getElementById('fullscreenVideo');
      if (!video || video.readyState !== 4) return; // Not ready
      
      // Check if enough time has passed since last capture
      const now = Date.now();
      if (now - lastCaptureTime < 3000) return; // 3 second cooldown
      
      // Show analyzing indicator
      const spinner = document.getElementById('autoCaptureSpinner');
      const text = document.getElementById('autoCaptureText');
      if (spinner && text) {
        spinner.classList.remove('d-none');
        text.textContent = 'Analyzing...';
      }
      
      // Analyze image quality
      const quality = await analyzeImageQuality(video);
      
      // Hide spinner
      if (spinner) spinner.classList.add('d-none');
      
      if (quality.isGood) {
        console.log('Auto-capturing: Good quality detected', quality);
        if (text) text.textContent = 'Capturing...';
        lastCaptureTime = now;
        await captureFullscreenPhoto();
      } else {
        if (text) text.textContent = 'Waiting for good quality...';
      }
    }, 1000); // Check every second
  }
  
  function toggleAutoCapture() {
    autoCaptureEnabled = !autoCaptureEnabled;
    
    const toggleBtn = document.getElementById('autoCaptureToggle');
    const text = document.getElementById('autoCaptureText');
    
    if (autoCaptureEnabled) {
      toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i>';
      if (text) text.textContent = 'Active';
      showNotification('Auto-capture enabled', 'info');
    } else {
      toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
      if (text) text.textContent = 'Paused';
      showNotification('Auto-capture paused', 'warning');
    }
  }
  
  function stopAutoCapture() {
    if (autoCaptureInterval) {
      clearInterval(autoCaptureInterval);
      autoCaptureInterval = null;
    }
  }
  
  async function analyzeImageQuality(video) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0);
    
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;
    
    // Calculate brightness and contrast
    let totalBrightness = 0;
    let totalContrast = 0;
    let edgeCount = 0;
    let textLikePixels = 0;
    
    for (let i = 0; i < data.length; i += 4) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // Brightness (0-255)
      const brightness = (r + g + b) / 3;
      totalBrightness += brightness;
      
      // Check for text-like patterns (high contrast areas)
      if (i > 0 && i < data.length - 4) {
        const prevBrightness = (data[i - 4] + data[i - 3] + data[i - 2]) / 3;
        const contrast = Math.abs(brightness - prevBrightness);
        totalContrast += contrast;
        
        if (contrast > 50) {
          edgeCount++;
        }
        
        // Detect potential text (dark pixels with good contrast)
        if (brightness < 100 && contrast > 30) {
          textLikePixels++;
        }
      }
    }
    
    const avgBrightness = totalBrightness / (data.length / 4);
    const avgContrast = totalContrast / (data.length / 4);
    const edgeDensity = edgeCount / (data.length / 4);
    const textDensity = textLikePixels / (data.length / 4);
    
          // Quality criteria - more lenient for better detection
      const isGood = (
        avgBrightness > 60 && avgBrightness < 220 && // Wider brightness range
        avgContrast > 15 && // Lower contrast threshold
        edgeDensity > 0.005 && // Lower edge threshold
        textDensity > 0.003 // Lower text density threshold
      );
    
    return {
      isGood,
      brightness: avgBrightness,
      contrast: avgContrast,
      edgeDensity,
      textDensity
    };
  }
  
  async function switchCamera() {
    if (!stream) return;
    
    // Stop current stream
    stream.getTracks().forEach(track => track.stop());
    
    try {
      // Get new stream with different facing mode
      const currentFacingMode = stream.getVideoTracks()[0].getSettings().facingMode;
      const newFacingMode = currentFacingMode === 'environment' ? 'user' : 'environment';
      
      stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: newFacingMode,
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        } 
      });
      
      // Update both video elements
      const modalVideo = document.getElementById('cameraVideo');
      const fullscreenVideo = document.getElementById('fullscreenVideo');
      
      if (modalVideo) modalVideo.srcObject = stream;
      if (fullscreenVideo) fullscreenVideo.srcObject = stream;
      
    } catch (err) {
      console.error('Camera switch error:', err);
      showNotification('Failed to switch camera', 'warning');
    }
  }
  
  // Upload functions
  function uploadImage() {
    const input = document.getElementById('scanImageInput');
    input.value = '';
    input.onchange = async (e) => {
      const file = e.target.files && e.target.files[0];
      if (!file) return;
      const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
      modal.hide();
      await handleImageFile(file);
    };
    input.click();
  }
  
  function uploadPdf() {
    const input = document.getElementById('scanPdfInput');
    input.value = '';
    input.onchange = async (e) => {
      const file = e.target.files && e.target.files[0];
      if (!file) return;
      const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
      modal.hide();
      await handlePdfFile(file);
    };
    input.click();
  }



  async function handleImageFile(file) {
    try {
      toggleScanLoader(true);
      const textEl = document.getElementById('scanLoaderText');
      
      if (textEl) textEl.textContent = 'Processing image...';
      
      // Enhanced OCR with better settings
      const { data } = await Tesseract.recognize(file, 'eng', {
        logger: (m) => {
          if (textEl) {
            if (m.status === 'recognizing text') {
              textEl.textContent = `OCR Progress: ${Math.round(m.progress * 100)}%`;
            } else if (m.status === 'loading tesseract core') {
              textEl.textContent = 'Loading OCR engine...';
            } else if (m.status === 'loading language traineddata') {
              textEl.textContent = 'Loading language data...';
            } else if (m.status === 'initializing tesseract') {
              textEl.textContent = 'Initializing OCR...';
            }
          }
        },
        // Better OCR settings for document scanning
        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:!?()[]{}"\'-_/\\|+=<>@#$%^&*~` ',
        preserve_interword_spaces: '1',
        tessedit_pageseg_mode: '6', // Uniform block of text
        tessedit_ocr_engine_mode: '3' // Default, based on what is available
      });
      
      const text = (data && data.text) ? data.text : '';
      
      if (!text.trim()) {
        showNotification('No text detected. Try a clearer photo with better lighting.', 'warning');
        return;
      }
      
      if (textEl) textEl.textContent = 'Extracting topics...';
      
      const topics = parseTextToTopics(text);
      if (topics.length === 0) {
        showNotification('Could not find topic lines in the image. Try a different angle or better lighting.', 'warning');
        return;
      }
      
      addTopicsFromArray(topics);
      showNotification(`Added ${topics.length} topic(s) from image scan`, 'success');
    } catch (err) {
      console.error('OCR error:', err);
      const msg = (err && err.message) ? err.message : String(err);
      showNotification(`Image scanning failed: ${msg}`, 'danger');
    } finally {
      toggleScanLoader(false);
    }
  }

     function parseTextToTopics(text) {
     // Split by line and clean
     const lines = text.split(/\r?\n/);
     const cleaned = lines
       .map(l => l.trim())
       .filter(l => l.length > 0)
       .map(l => l.replace(/\s{2,}/g, ' ')) // normalize whitespace
       .filter(l => l.length >= 3)
       .filter(l => /[A-Za-z]/.test(l));

     // Smart topic extraction
     const topics = [];
     const seen = new Set();
     
     for (const line of cleaned) {
       // Skip header/footer lines
       if (line.toLowerCase().includes('page') || 
           line.toLowerCase().includes('student sign') || 
           line.toLowerCase().includes('supervisor sign') ||
           line.toLowerCase().includes('date') ||
           line.toLowerCase().includes('assignment sheet') ||
           line.toLowerCase().includes('topic name') ||
           line.toLowerCase().includes('no')) {
         continue;
       }
       
       // Handle numbered topics (e.g., "1. C Basic / Introduction")
       let topic = line;
       
       // Remove common prefixes but keep structure
       topic = topic.replace(/^[-•*\u2022\u25CF\u25E6\u2219]+\s*/, ''); // bullets
       
       // For numbered items, keep the number if it's part of a structured list
       if (/^\d+\.\d+\s/.test(topic)) {
         // Sub-topics like "1.1 Write a Program..."
         topic = topic.replace(/^\d+\.\d+\s+/, ''); // Remove "1.1 " but keep content
       } else if (/^\d+\.\s/.test(topic)) {
         // Main topics like "1. C Basic / Introduction"
         topic = topic.replace(/^\d+\.\s+/, ''); // Remove "1. " but keep content
       }
       
       // Skip very short or generic lines
       if (topic.length < 5 || 
           topic.toLowerCase().includes('wap') && topic.length < 10) {
         continue;
       }
       
       // De-duplicate
       const key = topic.toLowerCase().trim();
       if (!seen.has(key) && key.length > 0) {
         seen.add(key);
         topics.push(topic.trim());
       }
     }
     
     return topics.slice(0, 100); // Increased limit for better coverage
   }

  function addTopicsFromArray(topicArray) {
    const topicsContainer = document.getElementById('topicsContainer');
    // If the first (and only) input is empty, fill it; otherwise append new rows
    const existingInputs = topicsContainer.querySelectorAll('.topic-input');
    let startIndex = 0;
    if (existingInputs.length === 1 && existingInputs[0].value.trim() === '') {
      existingInputs[0].value = topicArray[0] || '';
      startIndex = 1;
    }
    for (let i = startIndex; i < topicArray.length; i++) {
      const topicDiv = document.createElement('div');
      topicDiv.className = 'topic-item mb-2';
      topicDiv.innerHTML = `
        <div class="input-group">
          <span class="input-group-text bg-light">
            <i class="bi bi-hash"></i>
          </span>
          <input type="text" name="topics" class="form-control topic-input" placeholder="Enter topic name" required>
          <button type="button" class="btn btn-outline-danger" onclick="removeTopic(this)" title="Remove topic">
            <i class="bi bi-trash"></i>
          </button>
        </div>
      `;
      topicsContainer.appendChild(topicDiv);
      const input = topicDiv.querySelector('.topic-input');
      input.value = topicArray[i];
    }
  }

  function toggleScanLoader(show) {
    const el = document.getElementById('scanLoader');
    const textEl = document.getElementById('scanLoaderText');
    if (!el) return;
    if (show) {
      el.classList.remove('d-none');
    } else {
      el.classList.add('d-none');
    }
    if (textEl) textEl.textContent = 'Scanning for topics…';
  }

       async function handlePdfFile(file) {
    try {
      toggleScanLoader(true);
      const textEl = document.getElementById('scanLoaderText');
      
      // Check if PDF.js is available
      if (typeof pdfjsLib === 'undefined') {
        throw new Error('PDF.js library not loaded. Please refresh the page and try again.');
      }
      
      if (!pdfjsLib.getDocument) {
        throw new Error('PDF engine not initialized. Please check your internet connection.');
      }
      
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      const totalPages = pdf.numPages;

      if (textEl) textEl.textContent = `Processing ${totalPages} page(s)…`;
      
      const allText = [];
      const allLines = [];

      for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
        if (textEl) textEl.textContent = `Reading page ${pageNum}/${totalPages}…`;
        const page = await pdf.getPage(pageNum);

        // Method 1: Native text extraction with better structure
        try {
          const textContent = await page.getTextContent();
          let pageText = '';
          let lastY = null;
          let lastX = null;
          
          // Sort items by Y position (top to bottom) then X position (left to right)
          const sortedItems = textContent.items.sort((a, b) => {
            const aY = a.transform ? a.transform[5] : 0;
            const bY = b.transform ? b.transform[5] : 0;
            if (Math.abs(aY - bY) < 5) {
              // Same line, sort by X
              const aX = a.transform ? a.transform[4] : 0;
              const bX = b.transform ? b.transform[4] : 0;
              return aX - bX;
            }
            return bY - aY; // Top to bottom
          });
          
          for (const item of sortedItems) {
            if (item.str && item.str.trim()) {
              // Check if we need a line break
              if (lastY !== null && item.transform && item.transform[5] !== undefined) {
                const y = item.transform[5];
                if (Math.abs(y - lastY) > 8) {
                  pageText += '\n';
                } else if (lastX !== null && item.transform && item.transform[4] !== undefined) {
                  const x = item.transform[4];
                  if (x - lastX > 20) {
                    pageText += ' '; // Add space between words
                  }
                }
              }
              
              pageText += item.str;
              lastY = item.transform ? item.transform[5] : null;
              lastX = item.transform ? item.transform[4] : null;
            }
          }
          
          if (pageText.trim()) {
            allText.push(pageText.trim());
            const lines = pageText.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
            allLines.push(...lines);
          }
        } catch (err) {
          console.log(`Text extraction failed for page ${pageNum}, trying OCR...`);
        }

        // Method 2: OCR fallback for pages with no text or poor text extraction
        if (allText.length < pageNum) {
          if (textEl) textEl.textContent = `OCR page ${pageNum}/${totalPages}…`;
          try {
            const viewport = page.getViewport({ scale: 2.5 }); // Higher resolution
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = viewport.width;
            canvas.height = viewport.height;
            
            await page.render({ canvasContext: ctx, viewport }).promise;
            
            const dataUrl = canvas.toDataURL('image/png');
            const { data } = await Tesseract.recognize(dataUrl, 'eng', {
              logger: m => {
                if (textEl && m.status === 'recognizing text') {
                  textEl.textContent = `OCR page ${pageNum}/${totalPages} (${Math.round(m.progress * 100)}%)…`;
                }
              }
            });
            
            if (data && data.text && data.text.trim()) {
              allText.push(data.text.trim());
              const lines = data.text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
              allLines.push(...lines);
            }
          } catch (ocrErr) {
            console.error(`OCR failed for page ${pageNum}:`, ocrErr);
          }
        }
      }

      if (textEl) textEl.textContent = `Processing ${allLines.length} lines…`;
      
      const topics = parseTextToTopics(allLines.join('\n'));
      if (topics.length === 0) {
        showNotification('No topics detected in the PDF. Try a different file or check if the PDF contains readable text.', 'warning');
        return;
      }
      
      addTopicsFromArray(topics);
      showNotification(`Added ${topics.length} topic(s) from ${totalPages} page(s)`, 'success');
    } catch (err) {
      console.error('PDF scan error:', err);
      const msg = (err && err.message) ? err.message : String(err);
      showNotification(`Failed to scan PDF: ${msg}`, 'danger');
    } finally {
      toggleScanLoader(false);
    }
  }
</script>